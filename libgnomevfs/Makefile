# Makefile.in generated by automake 1.11.1 from Makefile.am.
# libgnomevfs/Makefile.  Generated from Makefile.in by configure.

# Copyright (C) 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002,
# 2003, 2004, 2005, 2006, 2007, 2008, 2009  Free Software Foundation,
# Inc.
# This Makefile.in is free software; the Free Software Foundation
# gives unlimited permission to copy and/or distribute it,
# with or without modifications, as long as this notice is preserved.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY, to the extent permitted by law; without
# even the implied warranty of MERCHANTABILITY or FITNESS FOR A
# PARTICULAR PURPOSE.





pkgdatadir = $(datadir)/gnome-vfs
pkgincludedir = $(includedir)/gnome-vfs
pkglibdir = $(libdir)/gnome-vfs
pkglibexecdir = $(libexecdir)/gnome-vfs
am__cd = CDPATH="$${ZSH_VERSION+.}$(PATH_SEPARATOR)" && cd
install_sh_DATA = $(install_sh) -c -m 644
install_sh_PROGRAM = $(install_sh) -c
install_sh_SCRIPT = $(install_sh) -c
INSTALL_HEADER = $(INSTALL_DATA)
transform = $(program_transform_name)
NORMAL_INSTALL = :
PRE_INSTALL = :
POST_INSTALL = :
NORMAL_UNINSTALL = :
PRE_UNINSTALL = :
POST_UNINSTALL = :
build_triplet = arm-unknown-linux-gnueabi
host_triplet = arm-unknown-linux-gnueabi
subdir = libgnomevfs
DIST_COMMON = $(libgnomevfsinclude_HEADERS) \
	$(libgnomevfsmoduleinclude_HEADERS) \
	$(libgnomevfsplatforminclude_HEADERS) $(noinst_HEADERS) \
	$(srcdir)/Makefile.am $(srcdir)/Makefile.in \
	$(srcdir)/gnome-vfs-file-size.h.in \
	$(srcdir)/gnome-vfs-version.h.in
ACLOCAL_M4 = $(top_srcdir)/aclocal.m4
am__aclocal_m4_deps = $(top_srcdir)/acinclude.m4 \
	$(top_srcdir)/configure.in
am__configure_deps = $(am__aclocal_m4_deps) $(CONFIGURE_DEPENDENCIES) \
	$(ACLOCAL_M4)
mkinstalldirs = $(SHELL) $(top_srcdir)/mkinstalldirs
CONFIG_HEADER = $(top_builddir)/config.h
CONFIG_CLEAN_FILES = gnome-vfs-file-size.h gnome-vfs-version.h
CONFIG_CLEAN_VPATH_FILES =
am__vpath_adj_setup = srcdirstrip=`echo "$(srcdir)" | sed 's|.|.|g'`;
am__vpath_adj = case $$p in \
    $(srcdir)/*) f=`echo "$$p" | sed "s|^$$srcdirstrip/||"`;; \
    *) f=$$p;; \
  esac;
am__strip_dir = f=`echo $$p | sed -e 's|^.*/||'`;
am__install_max = 40
am__nobase_strip_setup = \
  srcdirstrip=`echo "$(srcdir)" | sed 's/[].[^$$\\*|]/\\\\&/g'`
am__nobase_strip = \
  for p in $$list; do echo "$$p"; done | sed -e "s|$$srcdirstrip/||"
am__nobase_list = $(am__nobase_strip_setup); \
  for p in $$list; do echo "$$p $$p"; done | \
  sed "s| $$srcdirstrip/| |;"' / .*\//!s/ .*/ ./; s,\( .*\)/[^/]*$$,\1,' | \
  $(AWK) 'BEGIN { files["."] = "" } { files[$$2] = files[$$2] " " $$1; \
    if (++n[$$2] == $(am__install_max)) \
      { print $$2, files[$$2]; n[$$2] = 0; files[$$2] = "" } } \
    END { for (dir in files) print dir, files[dir] }'
am__base_list = \
  sed '$$!N;$$!N;$$!N;$$!N;$$!N;$$!N;$$!N;s/\n/ /g' | \
  sed '$$!N;$$!N;$$!N;$$!N;s/\n/ /g'
am__installdirs = "$(DESTDIR)$(libdir)" \
	"$(DESTDIR)$(libgnomevfsincludedir)" \
	"$(DESTDIR)$(libgnomevfsmoduleincludedir)" \
	"$(DESTDIR)$(libgnomevfsplatformincludedir)"
LTLIBRARIES = $(lib_LTLIBRARIES) $(noinst_LTLIBRARIES)
am__DEPENDENCIES_1 =
libgnomevfs_2_la_DEPENDENCIES = $(am__DEPENDENCIES_1) $(FNMATCH_LIBS) \
	$(am__DEPENDENCIES_1) $(am__DEPENDENCIES_1) \
	$(am__DEPENDENCIES_1) $(am__DEPENDENCIES_1)
am__libgnomevfs_2_la_SOURCES_DIST = gnome-vfs-ace.c gnome-vfs-acl.c \
	gnome-vfs-application-registry.c gnome-vfs-address.c \
	gnome-vfs-async-job-map.c gnome-vfs-async-ops.c \
	gnome-vfs-cancellable-ops.c gnome-vfs-cancellation.c \
	gnome-vfs-configuration.c gnome-vfs-context.c \
	gnome-vfs-directory.c gnome-vfs-drive.c gnome-vfs-file-info.c \
	gnome-vfs-filesystem-type.c gnome-vfs-find-directory.c \
	gnome-vfs-handle.c gnome-vfs-inet-connection.c \
	gnome-vfs-init.c gnome-vfs-job-queue.c gnome-vfs-job.c \
	gnome-vfs-method.c gnome-vfs-mime-handlers.c \
	gnome-vfs-mime-info.c gnome-vfs-mime-info-cache.c \
	gnome-vfs-mime-monitor.c gnome-vfs-mime-sniff-buffer.c \
	gnome-vfs-mime.c gnome-vfs-mime-magic.c \
	gnome-vfs-module-callback-module-api.c \
	gnome-vfs-module-callback-private.c \
	gnome-vfs-module-callback.c gnome-vfs-module-shared.c \
	gnome-vfs-module.c gnome-vfs-monitor.c gnome-vfs-open-fd.c \
	gnome-vfs-ops.c gnome-vfs-private-utils.c gnome-vfs-private.c \
	gnome-vfs-resolve.c gnome-vfs-result.c \
	gnome-vfs-socket-buffer.c gnome-vfs-socket.c gnome-vfs-ssl.c \
	gnome-vfs-transform.c gnome-vfs-uri.c gnome-vfs-utils.c \
	gnome-vfs-volume-monitor.c gnome-vfs-volume.c gnome-vfs-xfer.c \
	xdgmimemagic.c xdgmime.c xdgmimecache.c xdgmimeglob.c \
	xdgmimeint.c xdgmimealias.c xdgmimeparent.c xdgmimeicon.c \
	gnome-vfs-enum-types.c gnome-vfs-cdrom.c \
	gnome-vfs-daemon-method.c gnome-vfs-dbus-utils.c \
	gnome-vfs-dns-sd.c gnome-vfs-module-callback-marshall.c \
	gnome-vfs-parse-ls.c gnome-vfs-pty.c \
	gnome-vfs-volume-monitor-client.c gnome-vfs-volume-ops.c \
	gnome-vfs-dllmain.c
am__objects_1 = gnome-vfs-enum-types.lo
am__objects_2 =
am__objects_3 = gnome-vfs-cdrom.lo gnome-vfs-daemon-method.lo \
	gnome-vfs-dbus-utils.lo gnome-vfs-dns-sd.lo \
	gnome-vfs-module-callback-marshall.lo gnome-vfs-parse-ls.lo \
	gnome-vfs-pty.lo gnome-vfs-volume-monitor-client.lo \
	gnome-vfs-volume-ops.lo $(am__objects_2)
am__objects_4 = gnome-vfs-dllmain.lo $(am__objects_2)
am__objects_5 = $(am__objects_3)
#am__objects_5 = $(am__objects_4)
am_libgnomevfs_2_la_OBJECTS = gnome-vfs-ace.lo gnome-vfs-acl.lo \
	gnome-vfs-application-registry.lo gnome-vfs-address.lo \
	gnome-vfs-async-job-map.lo gnome-vfs-async-ops.lo \
	gnome-vfs-cancellable-ops.lo gnome-vfs-cancellation.lo \
	gnome-vfs-configuration.lo gnome-vfs-context.lo \
	gnome-vfs-directory.lo gnome-vfs-drive.lo \
	gnome-vfs-file-info.lo gnome-vfs-filesystem-type.lo \
	gnome-vfs-find-directory.lo gnome-vfs-handle.lo \
	gnome-vfs-inet-connection.lo gnome-vfs-init.lo \
	gnome-vfs-job-queue.lo gnome-vfs-job.lo gnome-vfs-method.lo \
	gnome-vfs-mime-handlers.lo gnome-vfs-mime-info.lo \
	gnome-vfs-mime-info-cache.lo gnome-vfs-mime-monitor.lo \
	gnome-vfs-mime-sniff-buffer.lo gnome-vfs-mime.lo \
	gnome-vfs-mime-magic.lo \
	gnome-vfs-module-callback-module-api.lo \
	gnome-vfs-module-callback-private.lo \
	gnome-vfs-module-callback.lo gnome-vfs-module-shared.lo \
	gnome-vfs-module.lo gnome-vfs-monitor.lo gnome-vfs-open-fd.lo \
	gnome-vfs-ops.lo gnome-vfs-private-utils.lo \
	gnome-vfs-private.lo gnome-vfs-resolve.lo gnome-vfs-result.lo \
	gnome-vfs-socket-buffer.lo gnome-vfs-socket.lo \
	gnome-vfs-ssl.lo gnome-vfs-transform.lo gnome-vfs-uri.lo \
	gnome-vfs-utils.lo gnome-vfs-volume-monitor.lo \
	gnome-vfs-volume.lo gnome-vfs-xfer.lo xdgmimemagic.lo \
	xdgmime.lo xdgmimecache.lo xdgmimeglob.lo xdgmimeint.lo \
	xdgmimealias.lo xdgmimeparent.lo xdgmimeicon.lo \
	$(am__objects_1) $(am__objects_5) $(am__objects_2)
libgnomevfs_2_la_OBJECTS = $(am_libgnomevfs_2_la_OBJECTS)
libgnomevfs_2_la_LINK = $(LIBTOOL) --tag=CC $(AM_LIBTOOLFLAGS) \
	$(LIBTOOLFLAGS) --mode=link $(CCLD) $(AM_CFLAGS) $(CFLAGS) \
	$(libgnomevfs_2_la_LDFLAGS) $(LDFLAGS) -o $@
libgnomevfsdaemon_2_la_DEPENDENCIES = $(am__DEPENDENCIES_1) \
	$(am__DEPENDENCIES_1) libgnomevfs-2.la $(am__DEPENDENCIES_1)
am_libgnomevfsdaemon_2_la_OBJECTS = gnome-vfs-filesystem-type.lo \
	gnome-vfs-cdrom.lo gnome-vfs-hal-mounts.lo \
	gnome-vfs-volume-monitor-daemon.lo gnome-vfs-volume-monitor.lo \
	gnome-vfs-unix-mounts.lo $(am__objects_2)
libgnomevfsdaemon_2_la_OBJECTS = $(am_libgnomevfsdaemon_2_la_OBJECTS)
am_libgnomevfsdaemon_2_la_rpath =
DEFAULT_INCLUDES = -I. -I$(top_builddir)
depcomp = $(SHELL) $(top_srcdir)/depcomp
am__depfiles_maybe = depfiles
am__mv = mv -f
COMPILE = $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) \
	$(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS)
LTCOMPILE = $(LIBTOOL) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) \
	--mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) \
	$(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS)
CCLD = $(CC)
LINK = $(LIBTOOL) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) \
	--mode=link $(CCLD) $(AM_CFLAGS) $(CFLAGS) $(AM_LDFLAGS) \
	$(LDFLAGS) -o $@
SOURCES = $(libgnomevfs_2_la_SOURCES) \
	$(libgnomevfsdaemon_2_la_SOURCES)
DIST_SOURCES = $(am__libgnomevfs_2_la_SOURCES_DIST) \
	$(libgnomevfsdaemon_2_la_SOURCES)
HEADERS = $(libgnomevfsinclude_HEADERS) \
	$(libgnomevfsmoduleinclude_HEADERS) \
	$(libgnomevfsplatforminclude_HEADERS) $(noinst_HEADERS)
ETAGS = etags
CTAGS = ctags
DISTFILES = $(DIST_COMMON) $(DIST_SOURCES) $(TEXINFOS) $(EXTRA_DIST)
ACLOCAL = ${SHELL} /home/qwazix/cordia/gnome-vfs-2.24.4/missing --run aclocal-1.11
ACLOCAL_AMFLAGS = ${ACLOCAL_FLAGS}
ACL_LIBS = 
ALLOCA = 
ALL_LINGUAS = 
AMTAR = ${SHELL} /home/qwazix/cordia/gnome-vfs-2.24.4/missing --run tar
AR = ar
AS = as
AUTOCONF = ${SHELL} /home/qwazix/cordia/gnome-vfs-2.24.4/missing --run autoconf
AUTOHEADER = ${SHELL} /home/qwazix/cordia/gnome-vfs-2.24.4/missing --run autoheader
AUTOMAKE = ${SHELL} /home/qwazix/cordia/gnome-vfs-2.24.4/missing --run automake-1.11
AVAHI_CFLAGS = 
AVAHI_LIBS = 
AWK = gawk
BZ2_LIBS =  -lbz2
CATALOGS = 
CATOBJEXT = .gmo
CC = gcc -std=gnu99
CCDEPMODE = depmode=gcc3
CDDA_LIBS = 
CFLAGS = -g -O2
CPP = gcc -E
CPPFLAGS = 
CYGPATH_W = echo
DATADIRNAME = share
DBUS_SERVICE_DIR = ${datarootdir}/dbus-1/services
DEFS = -DHAVE_CONFIG_H
DEPDIR = .deps
DLLTOOL = dlltool
DSYMUTIL = 
DUMPBIN = 
ECHO_C = 
ECHO_N = -n
ECHO_T = 
EGREP = /scratchbox/tools/bin/grep -E
ENABLE_PROFILER = 
EXEEXT = 
FAM_LIBS = 
FGREP = /scratchbox/tools/bin/grep -F
GCONFTOOL = /usr/bin/gconftool-2
GCONF_REQUIRED = 1.1.1
GCONF_SCHEMA_CONFIG_SOURCE = xml:merged:/etc/gconf/gconf.xml.defaults
GCONF_SCHEMA_FILE_DIR = $(sysconfdir)/gconf/schemas
GETTEXT_PACKAGE = gnome-vfs-2.0
GLIB_REQUIRED = 2.9.3
GMOFILES = 
GMSGFMT = /usr/bin/msgfmt
GNOME_VFS_DIR = /home/qwazix/cordia/gnome-vfs-2.24.4
GREP = /scratchbox/tools/bin/grep
GSSAPI_CFLAGS = 
GSSAPI_LIBS = 
GTKDOC_CHECK = 
GTKDOC_MKPDF = 
GTKDOC_REBASE = true
HAL_CFLAGS = -DDBUS_API_SUBJECT_TO_CHANGE -I/usr/include/hal -I/usr/include/dbus-1.0 -I/usr/lib/dbus-1.0/include  
HAL_LIBS = -lhal -ldbus-1 -lpthread -lrt  
HOWL_CFLAGS = 
HOWL_LIBS = 
HTML_DIR = ${datadir}/gtk-doc/html
INSTALL = /scratchbox/tools/bin/install -c
INSTALL_DATA = ${INSTALL} -m 644
INSTALL_PROGRAM = ${INSTALL}
INSTALL_SCRIPT = ${INSTALL}
INSTALL_STRIP_PROGRAM = $(install_sh) -c -s
INSTOBJEXT = .mo
INTLLIBS = 
INTLTOOL_EXTRACT = /usr/bin/intltool-extract
INTLTOOL_MERGE = /usr/bin/intltool-merge
INTLTOOL_PERL = /scratchbox/tools/bin/perl
INTLTOOL_UPDATE = /usr/bin/intltool-update
KRB5_CONFIG = none
LD = /scratchbox/compilers/cs2009q3-eglibc2.10-armv7-hard/arm-none-linux-gnueabi/bin/ld
LDFLAGS = 
LIBEFS_CFLAGS = 
LIBEFS_LIBS = 
LIBGNOMEVFSDAEMON_CFLAGS = -DDBUS_API_SUBJECT_TO_CHANGE -pthread -I/usr/include/glib-2.0 -I/usr/lib/glib-2.0/include -I/usr/include/hal -I/usr/include/dbus-1.0 -I/usr/lib/dbus-1.0/include  
LIBGNOMEVFSDAEMON_LIBS = -pthread -lhal-storage -lhal -ldbus-glib-1 -ldbus-1 -lpthread -lgobject-2.0 -lgthread-2.0 -lrt -lglib-2.0  
LIBGNOMEVFS_AGE = 2400
LIBGNOMEVFS_BINARY_AGE = 2404
LIBGNOMEVFS_CFLAGS = -pthread -I/usr/include/glib-2.0 -I/usr/lib/glib-2.0/include -I/usr/include/gconf/2 -I/usr/include/dbus-1.0 -I/usr/lib/dbus-1.0/include -I/usr/include/libxml2       
LIBGNOMEVFS_CURRENT = 2400
LIBGNOMEVFS_INTERFACE_AGE = 4
LIBGNOMEVFS_LIBS = -pthread -lgmodule-2.0 -lgconf-2 -lxml2 -ldbus-glib-1 -ldbus-1 -lpthread -lgobject-2.0 -lgthread-2.0 -lrt -lglib-2.0   -lssl -lcrypto      -lresolv
LIBGNOMEVFS_MAJOR_VERSION = 2
LIBGNOMEVFS_MICRO_VERSION = 4
LIBGNOMEVFS_MINOR_VERSION = 24
LIBGNOMEVFS_REVISION = 4
LIBGNOMEVFS_VERSION = 2.24.4
LIBGNUTLS_CFLAGS = 
LIBGNUTLS_CONFIG = 
LIBGNUTLS_LIBS = 
LIBOBJS = 
LIBS = -lutil -lrt -lrt 
LIBTOOL = $(SHELL) $(top_builddir)/libtool
LIBTOOL_EXPORT_OPTIONS = -export-symbols-regex "^[^_].*"
LIBXML_CFLAGS = -I/usr/include/libxml2  
LIBXML_LIBS = -lxml2  
LIPO = 
LN_S = ln -s
LTLIBOBJS = 
MAINT = #
MAKEINFO = ${SHELL} /home/qwazix/cordia/gnome-vfs-2.24.4/missing --run makeinfo
MKDIR_P = /scratchbox/tools/bin/mkdir -p
MKINSTALLDIRS = ./mkinstalldirs
MODULES_CFLAGS = -pthread -I/usr/include/glib-2.0 -I/usr/lib/glib-2.0/include  
MODULES_FILE_CFLAGS = -pthread -I/usr/include/glib-2.0 -I/usr/lib/glib-2.0/include -I/usr/include/gconf/2 -I/usr/include/dbus-1.0 -I/usr/lib/dbus-1.0/include  
MODULES_FILE_LIBS = -pthread -lgmodule-2.0 -lgconf-2 -ldbus-glib-1 -ldbus-1 -lpthread -lgobject-2.0 -lgthread-2.0 -lrt -lglib-2.0  
MODULES_GCONF_CFLAGS = -pthread -I/usr/include/glib-2.0 -I/usr/lib/glib-2.0/include -I/usr/include/gconf/2 -I/usr/include/dbus-1.0 -I/usr/lib/dbus-1.0/include  
MODULES_GCONF_LIBS = -pthread -lgmodule-2.0 -lgconf-2 -ldbus-glib-1 -ldbus-1 -lpthread -lgobject-2.0 -lgthread-2.0 -lrt -lglib-2.0  
MODULES_LIBS = -pthread -lgmodule-2.0 -lgobject-2.0 -lgthread-2.0 -lrt -lglib-2.0  
MODULES_XML_CFLAGS = -pthread -I/usr/include/glib-2.0 -I/usr/lib/glib-2.0/include -I/usr/include/libxml2  
MODULES_XML_GCONF_CFLAGS = -pthread -I/usr/include/glib-2.0 -I/usr/lib/glib-2.0/include -I/usr/include/libxml2 -I/usr/include/gconf/2 -I/usr/include/dbus-1.0 -I/usr/lib/dbus-1.0/include  
MODULES_XML_GCONF_LIBS = -pthread -lgmodule-2.0 -lxml2 -lgconf-2 -ldbus-glib-1 -ldbus-1 -lpthread -lgobject-2.0 -lgthread-2.0 -lrt -lglib-2.0  
MODULES_XML_LIBS = -pthread -lgmodule-2.0 -lgthread-2.0 -lrt -lglib-2.0 -lxml2  
MSGFMT = /usr/bin/msgfmt
MSGFMT_OPTS = -c
MSGMERGE = /usr/bin/msgmerge
NEONOBJS =  $(NEON_DAVOBJS)
NEON_BUILD_BUNDLED = yes
NEON_CFLAGS = -g -O2 -I.. -I../.. -I./imported/neon -I/usr/include/libxml2  
NEON_EXTRAOBJS =  ne_acl.lo
NEON_LIBS =  -lz -lxml2  
NEON_LINK_FLAGS = 
NEON_LTLIBS = 
NEON_OBJEXT = lo
NEON_SUPPORTS_DAV = yes
NEON_SUPPORTS_ZLIB = yes
NEON_TARGET = libneon.la
NM = /scratchbox/compilers/bin/nm -B
NMEDIT = 
OBJDUMP = objdump
OBJEXT = o
OPENSSL_CFLAGS =  
OPENSSL_LIBS = -lssl -lcrypto  
OTOOL = 
OTOOL64 = 
PACKAGE = gnome-vfs
PACKAGE_BUGREPORT = 
PACKAGE_NAME = 
PACKAGE_STRING = 
PACKAGE_TARNAME = 
PACKAGE_URL = 
PACKAGE_VERSION = 
PATH_SEPARATOR = :
PERL = perl
PKG_CONFIG = /usr/bin/pkg-config
PKG_CONFIG_LIBDIR = 
PKG_CONFIG_PATH = /usr/lib/pkgconfig
POFILES = 
POSUB = po
PO_IN_DATADIR_FALSE = 
PO_IN_DATADIR_TRUE = 
RANLIB = ranlib
REBUILD = 
SAMBA_CFLAGS = 
SAMBA_LIBS = 
SED = /scratchbox/tools/bin/sed
SELINUX_LIBS = 
SET_MAKE = 
SHELL = /bin/sh
SSH_PROGRAM = /scratchbox/tools/bin/ssh
STRIP = strip
TEST_CFLAGS = -pthread -I/usr/include/gconf/2 -I/usr/include/dbus-1.0 -I/usr/lib/dbus-1.0/include -I/usr/include/glib-2.0 -I/usr/lib/glib-2.0/include  
TEST_LIBS = -pthread -lgconf-2 -ldbus-glib-1 -ldbus-1 -lpthread -lgobject-2.0 -lgthread-2.0 -lrt -lglib-2.0  
TOP_BUILDDIR = /home/qwazix/cordia/gnome-vfs-2.24.4
USE_NLS = yes
VERSION = 2.24.4
VFS_CFLAGS =  
VFS_INCLUDEDIR = -I${includedir} -I${libdir}/vfs/include 
VFS_LIBDIR = -L${libdir}
VFS_LIBS = -lgnomevfs 
VFS_OFFSET = gint64
VFS_OFFSET_IS = LONG_LONG
VFS_SIZE = guint64
VFS_SIZE_IS = UNSIGNED_LONG_LONG
WARN_CFLAGS = -Wall -Wmissing-prototypes 
XGETTEXT = /usr/bin/xgettext
XML_REQUIRED = 2.6.0
abs_builddir = /home/qwazix/cordia/gnome-vfs-2.24.4/libgnomevfs
abs_srcdir = /home/qwazix/cordia/gnome-vfs-2.24.4/libgnomevfs
abs_top_builddir = /home/qwazix/cordia/gnome-vfs-2.24.4
abs_top_srcdir = /home/qwazix/cordia/gnome-vfs-2.24.4
ac_ct_CC = gcc
ac_ct_DUMPBIN = 
am__include = include
am__leading_dot = .
am__quote = 
am__tar = ${AMTAR} chof - "$$tardir"
am__untar = ${AMTAR} xf -
bindir = ${exec_prefix}/bin
build = arm-unknown-linux-gnueabi
build_alias = 
build_cpu = arm
build_os = linux-gnueabi
build_vendor = unknown
builddir = .
datadir = ${datarootdir}
datarootdir = ${prefix}/share
docdir = ${datarootdir}/doc/${PACKAGE}
dvidir = ${docdir}
exec_prefix = ${prefix}
host = arm-unknown-linux-gnueabi
host_alias = 
host_cpu = arm
host_os = linux-gnueabi
host_vendor = unknown
htmldir = ${docdir}
includedir = ${prefix}/include
infodir = ${datarootdir}/info
install_sh = ${SHELL} /home/qwazix/cordia/gnome-vfs-2.24.4/install-sh
libdir = ${exec_prefix}/lib
libexecdir = ${exec_prefix}/libexec
localedir = ${datarootdir}/locale
localstatedir = ${prefix}/var
lt_ECHO = echo
mandir = ${datarootdir}/man
mkdir_p = /scratchbox/tools/bin/mkdir -p
oldincludedir = /usr/include
pdfdir = ${docdir}
prefix = /usr/local
program_transform_name = s,x,x,
psdir = ${docdir}
sbindir = ${exec_prefix}/sbin
sharedstatedir = ${prefix}/com
srcdir = .
sysconfdir = ${prefix}/etc
target_alias = 
top_build_prefix = ../
top_builddir = ..
top_srcdir = ..
NULL = 
#FNMATCH_CFLAGS = -I$(top_srcdir)/imported/fnmatch
#FNMATCH_LIBS = ../imported/fnmatch/libfnmatch.la
INCLUDES = \
	-I$(top_srcdir)				\
	-I$(top_builddir)			\
	$(LIBGNOMEVFS_CFLAGS)			\
	$(LIBGNOMEVFSDAEMON_CFLAGS)		\
	$(VFS_CFLAGS)				\
	$(FNMATCH_CFLAGS)			\
	-DXDG_PREFIX=_gnome_vfs_xdg		\
	-DDBUS_API_SUBJECT_TO_CHANGE		\
	-D_FILE_OFFSET_BITS=64			\
	-D_BSD_SOURCE				\
	-D_LARGEFILE64_SOURCE                   \
	-D_POSIX_PTHREAD_SEMANTICS		\
	-D_REENTRANT				\
	-DG_DISABLE_DEPRECATED			\
	-DGNOME_VFS_PREFIX=\"$(prefix)\"	\
	-DGNOME_VFS_BINDIR=\"$(bindir)\"	\
	-DGNOME_VFS_DATADIR=\"$(datadir)\"	\
	-DGNOME_VFS_LIBDIR=\"$(libdir)\"	\
	-DGNOME_VFS_LOCALEDIR=\"$(prefix)/share/locale\" \
	-DGNOME_VFS_SYSCONFDIR=\"$(sysconfdir)\"\
	-DG_LOG_DOMAIN=\"libgnomevfs\"		\
	$(NULL)

libgnomevfs_headers_to_scan_for_enums = \
	gnome-vfs-address.h			\
	gnome-vfs-application-registry.h	\
	gnome-vfs-async-ops.h			\
	gnome-vfs-cancellation.h		\
	gnome-vfs-context.h			\
	gnome-vfs-directory.h			\
	gnome-vfs-drive.h			\
	gnome-vfs-file-info.h			\
	gnome-vfs-file-size.h			\
	gnome-vfs-find-directory.h		\
	gnome-vfs-handle.h			\
	gnome-vfs-init.h			\
	gnome-vfs-job-limit.h			\
	gnome-vfs-mime.h			\
	gnome-vfs-mime-deprecated.h		\
	gnome-vfs-mime-handlers.h		\
	gnome-vfs-mime-info-cache.h		\
	gnome-vfs-mime-monitor.h		\
	gnome-vfs-mime-utils.h			\
	gnome-vfs-module-callback.h		\
	gnome-vfs-monitor.h			\
	gnome-vfs-ops.h				\
	gnome-vfs-resolve.h			\
	gnome-vfs-result.h			\
	gnome-vfs-standard-callbacks.h		\
	gnome-vfs-types.h			\
	gnome-vfs-utils.h			\
	gnome-vfs-volume.h			\
	gnome-vfs-volume-monitor.h		\
	gnome-vfs-xfer.h			\
	gnome-vfs.h				\
	$(NULL)

libgnomevfs_headers = \
	$(libgnomevfs_headers_to_scan_for_enums)\
	gnome-vfs-dns-sd.h			\
	gnome-vfs-version.h			\
	gnome-vfs-uri.h				\
	$(NULL)

export_symbols = $(LIBTOOL_EXPORT_OPTIONS)

# Generate the enums source code, with glib-mkenums:
# This is based on the same Makefile.am stuff in pango:
libgnomevfs_built_headers = gnome-vfs-enum-types.h
libgnomevfs_built_cfiles = gnome-vfs-enum-types.c
lib_LTLIBRARIES = libgnomevfs-2.la
#SOCKET_LIBS = -lws2_32
noinst_LTLIBRARIES = libgnomevfsdaemon-2.la
libgnomevfs_2_la_LIBADD = \
	$(LIBGNOMEVFS_LIBS)			\
	$(FNMATCH_LIBS)				\
	$(SOCKET_LIBS)				\
	$(INTLLIBS)				\
	$(SELINUX_LIBS)				\
	$(NULL)

libgnomevfs_2_la_LDFLAGS = \
	-version-info $(LIBGNOMEVFS_CURRENT):$(LIBGNOMEVFS_REVISION):$(LIBGNOMEVFS_AGE) \
	-no-undefined \
	$(export_symbols) \
	$(NULL)

libgnomevfsdaemon_2_la_LIBADD = \
	$(LIBGNOMEVFS_LIBS)			\
	$(LIBGNOMEVFSDAEMON_LIBS)		\
	libgnomevfs-2.la			\
	$(NULL)

libgnomevfsincludedir = $(includedir)/gnome-vfs-2.0/libgnomevfs
libgnomevfsmoduleincludedir = $(includedir)/gnome-vfs-module-2.0/libgnomevfs

# mime-sniff-buffers and cancellabe-ops are used by modules
noinst_HEADERS = \
	gnome-vfs-async-job-map.h		\
	gnome-vfs-backend.h			\
	gnome-vfs-cancellable-ops.h		\
	gnome-vfs-cancellation-private.h	\
	gnome-vfs-cdrom.h			\
	gnome-vfs-configuration.h		\
	gnome-vfs-daemon-method.h		\
	gnome-vfs-dbus-utils.h                  \
	gnome-vfs-filesystem-type.h		\
	gnome-vfs-handle-private.h		\
	gnome-vfs-hal-mounts.h			\
	gnome-vfs-iso9660.h			\
	gnome-vfs-job-queue.h			\
	gnome-vfs-job.h				\
	gnome-vfs-mime-magic.h			\
	gnome-vfs-mime-private.h		\
	gnome-vfs-mime-sniff-buffer-private.h	\
	gnome-vfs-mime-sniff-buffer.h		\
	gnome-vfs-module-callback-private.h	\
	gnome-vfs-monitor-private.h		\
	gnome-vfs-private-utils.h		\
	gnome-vfs-private.h			\
	gnome-vfs-unix-mounts.h 		\
	gnome-vfs-volume-monitor-client.h	\
	gnome-vfs-volume-monitor-daemon.h	\
	gnome-vfs-volume-monitor-private.h 	\
	xdgmime.h				\
	xdgmimecache.h				\
	xdgmimeglob.h				\
	xdgmimemagic.h				\
	xdgmimeint.h				\
	xdgmimealias.h				\
	xdgmimeparent.h				\
	xdgmimeicon.h				\
	$(NULL)

libgnomevfsmoduleinclude_HEADERS = \
	gnome-vfs-cancellable-ops.h		\
	gnome-vfs-inet-connection.h		\
	gnome-vfs-method.h			\
	gnome-vfs-mime-info.h			\
	gnome-vfs-module-callback-module-api.h	\
	gnome-vfs-module-shared.h		\
	gnome-vfs-module.h			\
	gnome-vfs-parse-ls.h			\
	gnome-vfs-ssl.h				\
	gnome-vfs-transform.h			\
	gnome-vfs-socket-buffer.h		\
	gnome-vfs-socket.h			\
	gnome-vfs-pty.h				\
	$(NULL)

libgnomevfsinclude_HEADERS = \
	gnome-vfs-ace.h						\
	gnome-vfs-acl.h						\
	gnome-vfs-application-registry.h	\
	gnome-vfs-address.h			\
	gnome-vfs-async-ops.h			\
	gnome-vfs-cancellation.h		\
	gnome-vfs-context.h			\
	gnome-vfs-directory.h			\
	gnome-vfs-dns-sd.h			\
	gnome-vfs-drive.h			\
	gnome-vfs-enum-types.h			\
	gnome-vfs-file-info.h			\
	gnome-vfs-file-size.h			\
	gnome-vfs-find-directory.h		\
	gnome-vfs-handle.h			\
	gnome-vfs-init.h			\
	gnome-vfs-job-limit.h			\
	gnome-vfs-mime.h			\
	gnome-vfs-mime-deprecated.h		\
	gnome-vfs-mime-handlers.h		\
	gnome-vfs-mime-info-cache.h		\
	gnome-vfs-mime-monitor.h		\
	gnome-vfs-mime-utils.h			\
	gnome-vfs-module-callback.h		\
	gnome-vfs-monitor.h			\
	gnome-vfs-ops.h				\
	gnome-vfs-resolve.h			\
	gnome-vfs-result.h			\
	gnome-vfs-standard-callbacks.h		\
	gnome-vfs-types.h			\
	gnome-vfs-uri.h				\
	gnome-vfs-utils.h			\
	gnome-vfs-version.h			\
	gnome-vfs-volume-monitor.h		\
	gnome-vfs-volume.h			\
	gnome-vfs-xfer.h			\
	gnome-vfs.h				\
	$(NULL)

libgnomevfs_win32_sources = \
	gnome-vfs-dllmain.c			\
	$(NULL)

libgnomevfs_unix_sources = \
	gnome-vfs-cdrom.c			\
	gnome-vfs-daemon-method.c		\
	gnome-vfs-dbus-utils.c			\
	gnome-vfs-dns-sd.c			\
	gnome-vfs-module-callback-marshall.c	\
	gnome-vfs-parse-ls.c			\
	gnome-vfs-pty.c				\
	gnome-vfs-volume-monitor-client.c	\
	gnome-vfs-volume-ops.c			\
	$(NULL)

libgnomevfs_platform_sources = $(libgnomevfs_unix_sources)
#libgnomevfs_platform_sources = $(libgnomevfs_win32_sources)
libgnomevfs_2_la_SOURCES = \
	gnome-vfs-ace.c						\
	gnome-vfs-acl.c						\
	gnome-vfs-application-registry.c	\
	gnome-vfs-address.c			\
	gnome-vfs-async-job-map.c		\
	gnome-vfs-async-ops.c			\
	gnome-vfs-cancellable-ops.c	 	\
	gnome-vfs-cancellation.c		\
	gnome-vfs-configuration.c		\
	gnome-vfs-context.c			\
	gnome-vfs-directory.c			\
	gnome-vfs-drive.c			\
	gnome-vfs-file-info.c			\
	gnome-vfs-filesystem-type.c		\
	gnome-vfs-find-directory.c		\
	gnome-vfs-handle.c			\
	gnome-vfs-inet-connection.c		\
	gnome-vfs-init.c			\
	gnome-vfs-job-queue.c			\
	gnome-vfs-job.c				\
	gnome-vfs-method.c			\
	gnome-vfs-mime-handlers.c		\
	gnome-vfs-mime-info.c			\
	gnome-vfs-mime-info-cache.c		\
	gnome-vfs-mime-monitor.c		\
	gnome-vfs-mime-sniff-buffer.c		\
	gnome-vfs-mime.c			\
	gnome-vfs-mime-magic.c			\
	gnome-vfs-module-callback-module-api.c	\
	gnome-vfs-module-callback-private.c	\
	gnome-vfs-module-callback.c		\
	gnome-vfs-module-shared.c		\
	gnome-vfs-module.c			\
	gnome-vfs-monitor.c			\
	gnome-vfs-open-fd.c			\
	gnome-vfs-ops.c				\
	gnome-vfs-private-utils.c		\
	gnome-vfs-private.c			\
	gnome-vfs-resolve.c			\
	gnome-vfs-result.c			\
	gnome-vfs-socket-buffer.c		\
	gnome-vfs-socket.c			\
	gnome-vfs-ssl.c				\
	gnome-vfs-transform.c			\
	gnome-vfs-uri.c				\
	gnome-vfs-utils.c			\
	gnome-vfs-volume-monitor.c		\
	gnome-vfs-volume.c			\
	gnome-vfs-xfer.c			\
	xdgmimemagic.c				\
	xdgmime.c				\
	xdgmimecache.c				\
	xdgmimeglob.c				\
	xdgmimeint.c				\
	xdgmimealias.c				\
	xdgmimeparent.c				\
	xdgmimeicon.c				\
	$(libgnomevfs_built_cfiles)		\
	$(libgnomevfs_platform_sources)		\
	$(NULL)


# The daemon uses all interfaces in gnome-vfs-cdrom
# and uses _gnome_vfs_filesystem_volume_name, which all
# only use static data.
#
libgnomevfsdaemon_2_la_SOURCES = \
	gnome-vfs-filesystem-type.c		\
	gnome-vfs-cdrom.c			\
	gnome-vfs-hal-mounts.c			\
	gnome-vfs-volume-monitor-daemon.c	\
	gnome-vfs-volume-monitor.c	 	\
	gnome-vfs-unix-mounts.c			\
	$(NULL)


# Platform specific includes
libgnomevfsplatformincludedir = $(libdir)/gnome-vfs-2.0/include
libgnomevfsplatforminclude_HEADERS = \
	gnome-vfs-file-size.h


# TESTS = check-headers.pl
EXTRA_DIST = check-headers.pl $(libgnomevfs_win32_sources)
BUILT_SOURCES = \
	gnome-vfs-enum-types.h			\
	gnome-vfs-enum-types.c			\
	gnome-vfs-version.h			\
	$(NULL)

CLEANFILES = $(BUILT_SOURCES)
all: $(BUILT_SOURCES)
	$(MAKE) $(AM_MAKEFLAGS) all-am

.SUFFIXES:
.SUFFIXES: .c .lo .o .obj
$(srcdir)/Makefile.in: # $(srcdir)/Makefile.am  $(am__configure_deps)
	@for dep in $?; do \
	  case '$(am__configure_deps)' in \
	    *$$dep*) \
	      ( cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh ) \
	        && { if test -f $@; then exit 0; else break; fi; }; \
	      exit 1;; \
	  esac; \
	done; \
	echo ' cd $(top_srcdir) && $(AUTOMAKE) --gnu libgnomevfs/Makefile'; \
	$(am__cd) $(top_srcdir) && \
	  $(AUTOMAKE) --gnu libgnomevfs/Makefile
.PRECIOUS: Makefile
Makefile: $(srcdir)/Makefile.in $(top_builddir)/config.status
	@case '$?' in \
	  *config.status*) \
	    cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh;; \
	  *) \
	    echo ' cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__depfiles_maybe)'; \
	    cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__depfiles_maybe);; \
	esac;

$(top_builddir)/config.status: $(top_srcdir)/configure $(CONFIG_STATUS_DEPENDENCIES)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh

$(top_srcdir)/configure: # $(am__configure_deps)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh
$(ACLOCAL_M4): # $(am__aclocal_m4_deps)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh
$(am__aclocal_m4_deps):
gnome-vfs-file-size.h: $(top_builddir)/config.status $(srcdir)/gnome-vfs-file-size.h.in
	cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@
gnome-vfs-version.h: $(top_builddir)/config.status $(srcdir)/gnome-vfs-version.h.in
	cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@
install-libLTLIBRARIES: $(lib_LTLIBRARIES)
	@$(NORMAL_INSTALL)
	test -z "$(libdir)" || $(MKDIR_P) "$(DESTDIR)$(libdir)"
	@list='$(lib_LTLIBRARIES)'; test -n "$(libdir)" || list=; \
	list2=; for p in $$list; do \
	  if test -f $$p; then \
	    list2="$$list2 $$p"; \
	  else :; fi; \
	done; \
	test -z "$$list2" || { \
	  echo " $(LIBTOOL) $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=install $(INSTALL) $(INSTALL_STRIP_FLAG) $$list2 '$(DESTDIR)$(libdir)'"; \
	  $(LIBTOOL) $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=install $(INSTALL) $(INSTALL_STRIP_FLAG) $$list2 "$(DESTDIR)$(libdir)"; \
	}

uninstall-libLTLIBRARIES:
	@$(NORMAL_UNINSTALL)
	@list='$(lib_LTLIBRARIES)'; test -n "$(libdir)" || list=; \
	for p in $$list; do \
	  $(am__strip_dir) \
	  echo " $(LIBTOOL) $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=uninstall rm -f '$(DESTDIR)$(libdir)/$$f'"; \
	  $(LIBTOOL) $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=uninstall rm -f "$(DESTDIR)$(libdir)/$$f"; \
	done

clean-libLTLIBRARIES:
	-test -z "$(lib_LTLIBRARIES)" || rm -f $(lib_LTLIBRARIES)
	@list='$(lib_LTLIBRARIES)'; for p in $$list; do \
	  dir="`echo $$p | sed -e 's|/[^/]*$$||'`"; \
	  test "$$dir" != "$$p" || dir=.; \
	  echo "rm -f \"$${dir}/so_locations\""; \
	  rm -f "$${dir}/so_locations"; \
	done

clean-noinstLTLIBRARIES:
	-test -z "$(noinst_LTLIBRARIES)" || rm -f $(noinst_LTLIBRARIES)
	@list='$(noinst_LTLIBRARIES)'; for p in $$list; do \
	  dir="`echo $$p | sed -e 's|/[^/]*$$||'`"; \
	  test "$$dir" != "$$p" || dir=.; \
	  echo "rm -f \"$${dir}/so_locations\""; \
	  rm -f "$${dir}/so_locations"; \
	done
libgnomevfs-2.la: $(libgnomevfs_2_la_OBJECTS) $(libgnomevfs_2_la_DEPENDENCIES) 
	$(libgnomevfs_2_la_LINK) -rpath $(libdir) $(libgnomevfs_2_la_OBJECTS) $(libgnomevfs_2_la_LIBADD) $(LIBS)
libgnomevfsdaemon-2.la: $(libgnomevfsdaemon_2_la_OBJECTS) $(libgnomevfsdaemon_2_la_DEPENDENCIES) 
	$(LINK) $(am_libgnomevfsdaemon_2_la_rpath) $(libgnomevfsdaemon_2_la_OBJECTS) $(libgnomevfsdaemon_2_la_LIBADD) $(LIBS)

mostlyclean-compile:
	-rm -f *.$(OBJEXT)

distclean-compile:
	-rm -f *.tab.c

include ./$(DEPDIR)/gnome-vfs-ace.Plo
include ./$(DEPDIR)/gnome-vfs-acl.Plo
include ./$(DEPDIR)/gnome-vfs-address.Plo
include ./$(DEPDIR)/gnome-vfs-application-registry.Plo
include ./$(DEPDIR)/gnome-vfs-async-job-map.Plo
include ./$(DEPDIR)/gnome-vfs-async-ops.Plo
include ./$(DEPDIR)/gnome-vfs-cancellable-ops.Plo
include ./$(DEPDIR)/gnome-vfs-cancellation.Plo
include ./$(DEPDIR)/gnome-vfs-cdrom.Plo
include ./$(DEPDIR)/gnome-vfs-configuration.Plo
include ./$(DEPDIR)/gnome-vfs-context.Plo
include ./$(DEPDIR)/gnome-vfs-daemon-method.Plo
include ./$(DEPDIR)/gnome-vfs-dbus-utils.Plo
include ./$(DEPDIR)/gnome-vfs-directory.Plo
include ./$(DEPDIR)/gnome-vfs-dllmain.Plo
include ./$(DEPDIR)/gnome-vfs-dns-sd.Plo
include ./$(DEPDIR)/gnome-vfs-drive.Plo
include ./$(DEPDIR)/gnome-vfs-enum-types.Plo
include ./$(DEPDIR)/gnome-vfs-file-info.Plo
include ./$(DEPDIR)/gnome-vfs-filesystem-type.Plo
include ./$(DEPDIR)/gnome-vfs-find-directory.Plo
include ./$(DEPDIR)/gnome-vfs-hal-mounts.Plo
include ./$(DEPDIR)/gnome-vfs-handle.Plo
include ./$(DEPDIR)/gnome-vfs-inet-connection.Plo
include ./$(DEPDIR)/gnome-vfs-init.Plo
include ./$(DEPDIR)/gnome-vfs-job-queue.Plo
include ./$(DEPDIR)/gnome-vfs-job.Plo
include ./$(DEPDIR)/gnome-vfs-method.Plo
include ./$(DEPDIR)/gnome-vfs-mime-handlers.Plo
include ./$(DEPDIR)/gnome-vfs-mime-info-cache.Plo
include ./$(DEPDIR)/gnome-vfs-mime-info.Plo
include ./$(DEPDIR)/gnome-vfs-mime-magic.Plo
include ./$(DEPDIR)/gnome-vfs-mime-monitor.Plo
include ./$(DEPDIR)/gnome-vfs-mime-sniff-buffer.Plo
include ./$(DEPDIR)/gnome-vfs-mime.Plo
include ./$(DEPDIR)/gnome-vfs-module-callback-marshall.Plo
include ./$(DEPDIR)/gnome-vfs-module-callback-module-api.Plo
include ./$(DEPDIR)/gnome-vfs-module-callback-private.Plo
include ./$(DEPDIR)/gnome-vfs-module-callback.Plo
include ./$(DEPDIR)/gnome-vfs-module-shared.Plo
include ./$(DEPDIR)/gnome-vfs-module.Plo
include ./$(DEPDIR)/gnome-vfs-monitor.Plo
include ./$(DEPDIR)/gnome-vfs-open-fd.Plo
include ./$(DEPDIR)/gnome-vfs-ops.Plo
include ./$(DEPDIR)/gnome-vfs-parse-ls.Plo
include ./$(DEPDIR)/gnome-vfs-private-utils.Plo
include ./$(DEPDIR)/gnome-vfs-private.Plo
include ./$(DEPDIR)/gnome-vfs-pty.Plo
include ./$(DEPDIR)/gnome-vfs-resolve.Plo
include ./$(DEPDIR)/gnome-vfs-result.Plo
include ./$(DEPDIR)/gnome-vfs-socket-buffer.Plo
include ./$(DEPDIR)/gnome-vfs-socket.Plo
include ./$(DEPDIR)/gnome-vfs-ssl.Plo
include ./$(DEPDIR)/gnome-vfs-transform.Plo
include ./$(DEPDIR)/gnome-vfs-unix-mounts.Plo
include ./$(DEPDIR)/gnome-vfs-uri.Plo
include ./$(DEPDIR)/gnome-vfs-utils.Plo
include ./$(DEPDIR)/gnome-vfs-volume-monitor-client.Plo
include ./$(DEPDIR)/gnome-vfs-volume-monitor-daemon.Plo
include ./$(DEPDIR)/gnome-vfs-volume-monitor.Plo
include ./$(DEPDIR)/gnome-vfs-volume-ops.Plo
include ./$(DEPDIR)/gnome-vfs-volume.Plo
include ./$(DEPDIR)/gnome-vfs-xfer.Plo
include ./$(DEPDIR)/xdgmime.Plo
include ./$(DEPDIR)/xdgmimealias.Plo
include ./$(DEPDIR)/xdgmimecache.Plo
include ./$(DEPDIR)/xdgmimeglob.Plo
include ./$(DEPDIR)/xdgmimeicon.Plo
include ./$(DEPDIR)/xdgmimeint.Plo
include ./$(DEPDIR)/xdgmimemagic.Plo
include ./$(DEPDIR)/xdgmimeparent.Plo

.c.o:
	$(COMPILE) -MT $@ -MD -MP -MF $(DEPDIR)/$*.Tpo -c -o $@ $<
	$(am__mv) $(DEPDIR)/$*.Tpo $(DEPDIR)/$*.Po
#	source='$<' object='$@' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(COMPILE) -c $<

.c.obj:
	$(COMPILE) -MT $@ -MD -MP -MF $(DEPDIR)/$*.Tpo -c -o $@ `$(CYGPATH_W) '$<'`
	$(am__mv) $(DEPDIR)/$*.Tpo $(DEPDIR)/$*.Po
#	source='$<' object='$@' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(COMPILE) -c `$(CYGPATH_W) '$<'`

.c.lo:
	$(LTCOMPILE) -MT $@ -MD -MP -MF $(DEPDIR)/$*.Tpo -c -o $@ $<
	$(am__mv) $(DEPDIR)/$*.Tpo $(DEPDIR)/$*.Plo
#	source='$<' object='$@' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(LTCOMPILE) -c -o $@ $<

mostlyclean-libtool:
	-rm -f *.lo

clean-libtool:
	-rm -rf .libs _libs
install-libgnomevfsincludeHEADERS: $(libgnomevfsinclude_HEADERS)
	@$(NORMAL_INSTALL)
	test -z "$(libgnomevfsincludedir)" || $(MKDIR_P) "$(DESTDIR)$(libgnomevfsincludedir)"
	@list='$(libgnomevfsinclude_HEADERS)'; test -n "$(libgnomevfsincludedir)" || list=; \
	for p in $$list; do \
	  if test -f "$$p"; then d=; else d="$(srcdir)/"; fi; \
	  echo "$$d$$p"; \
	done | $(am__base_list) | \
	while read files; do \
	  echo " $(INSTALL_HEADER) $$files '$(DESTDIR)$(libgnomevfsincludedir)'"; \
	  $(INSTALL_HEADER) $$files "$(DESTDIR)$(libgnomevfsincludedir)" || exit $$?; \
	done

uninstall-libgnomevfsincludeHEADERS:
	@$(NORMAL_UNINSTALL)
	@list='$(libgnomevfsinclude_HEADERS)'; test -n "$(libgnomevfsincludedir)" || list=; \
	files=`for p in $$list; do echo $$p; done | sed -e 's|^.*/||'`; \
	test -n "$$files" || exit 0; \
	echo " ( cd '$(DESTDIR)$(libgnomevfsincludedir)' && rm -f" $$files ")"; \
	cd "$(DESTDIR)$(libgnomevfsincludedir)" && rm -f $$files
install-libgnomevfsmoduleincludeHEADERS: $(libgnomevfsmoduleinclude_HEADERS)
	@$(NORMAL_INSTALL)
	test -z "$(libgnomevfsmoduleincludedir)" || $(MKDIR_P) "$(DESTDIR)$(libgnomevfsmoduleincludedir)"
	@list='$(libgnomevfsmoduleinclude_HEADERS)'; test -n "$(libgnomevfsmoduleincludedir)" || list=; \
	for p in $$list; do \
	  if test -f "$$p"; then d=; else d="$(srcdir)/"; fi; \
	  echo "$$d$$p"; \
	done | $(am__base_list) | \
	while read files; do \
	  echo " $(INSTALL_HEADER) $$files '$(DESTDIR)$(libgnomevfsmoduleincludedir)'"; \
	  $(INSTALL_HEADER) $$files "$(DESTDIR)$(libgnomevfsmoduleincludedir)" || exit $$?; \
	done

uninstall-libgnomevfsmoduleincludeHEADERS:
	@$(NORMAL_UNINSTALL)
	@list='$(libgnomevfsmoduleinclude_HEADERS)'; test -n "$(libgnomevfsmoduleincludedir)" || list=; \
	files=`for p in $$list; do echo $$p; done | sed -e 's|^.*/||'`; \
	test -n "$$files" || exit 0; \
	echo " ( cd '$(DESTDIR)$(libgnomevfsmoduleincludedir)' && rm -f" $$files ")"; \
	cd "$(DESTDIR)$(libgnomevfsmoduleincludedir)" && rm -f $$files
install-libgnomevfsplatformincludeHEADERS: $(libgnomevfsplatforminclude_HEADERS)
	@$(NORMAL_INSTALL)
	test -z "$(libgnomevfsplatformincludedir)" || $(MKDIR_P) "$(DESTDIR)$(libgnomevfsplatformincludedir)"
	@list='$(libgnomevfsplatforminclude_HEADERS)'; test -n "$(libgnomevfsplatformincludedir)" || list=; \
	for p in $$list; do \
	  if test -f "$$p"; then d=; else d="$(srcdir)/"; fi; \
	  echo "$$d$$p"; \
	done | $(am__base_list) | \
	while read files; do \
	  echo " $(INSTALL_HEADER) $$files '$(DESTDIR)$(libgnomevfsplatformincludedir)'"; \
	  $(INSTALL_HEADER) $$files "$(DESTDIR)$(libgnomevfsplatformincludedir)" || exit $$?; \
	done

uninstall-libgnomevfsplatformincludeHEADERS:
	@$(NORMAL_UNINSTALL)
	@list='$(libgnomevfsplatforminclude_HEADERS)'; test -n "$(libgnomevfsplatformincludedir)" || list=; \
	files=`for p in $$list; do echo $$p; done | sed -e 's|^.*/||'`; \
	test -n "$$files" || exit 0; \
	echo " ( cd '$(DESTDIR)$(libgnomevfsplatformincludedir)' && rm -f" $$files ")"; \
	cd "$(DESTDIR)$(libgnomevfsplatformincludedir)" && rm -f $$files

ID: $(HEADERS) $(SOURCES) $(LISP) $(TAGS_FILES)
	list='$(SOURCES) $(HEADERS) $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '{ files[$$0] = 1; nonempty = 1; } \
	      END { if (nonempty) { for (i in files) print i; }; }'`; \
	mkid -fID $$unique
tags: TAGS

TAGS:  $(HEADERS) $(SOURCES)  $(TAGS_DEPENDENCIES) \
		$(TAGS_FILES) $(LISP)
	set x; \
	here=`pwd`; \
	list='$(SOURCES) $(HEADERS)  $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '{ files[$$0] = 1; nonempty = 1; } \
	      END { if (nonempty) { for (i in files) print i; }; }'`; \
	shift; \
	if test -z "$(ETAGS_ARGS)$$*$$unique"; then :; else \
	  test -n "$$unique" || unique=$$empty_fix; \
	  if test $$# -gt 0; then \
	    $(ETAGS) $(ETAGSFLAGS) $(AM_ETAGSFLAGS) $(ETAGS_ARGS) \
	      "$$@" $$unique; \
	  else \
	    $(ETAGS) $(ETAGSFLAGS) $(AM_ETAGSFLAGS) $(ETAGS_ARGS) \
	      $$unique; \
	  fi; \
	fi
ctags: CTAGS
CTAGS:  $(HEADERS) $(SOURCES)  $(TAGS_DEPENDENCIES) \
		$(TAGS_FILES) $(LISP)
	list='$(SOURCES) $(HEADERS)  $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '{ files[$$0] = 1; nonempty = 1; } \
	      END { if (nonempty) { for (i in files) print i; }; }'`; \
	test -z "$(CTAGS_ARGS)$$unique" \
	  || $(CTAGS) $(CTAGSFLAGS) $(AM_CTAGSFLAGS) $(CTAGS_ARGS) \
	     $$unique

GTAGS:
	here=`$(am__cd) $(top_builddir) && pwd` \
	  && $(am__cd) $(top_srcdir) \
	  && gtags -i $(GTAGS_ARGS) "$$here"

distclean-tags:
	-rm -f TAGS ID GTAGS GRTAGS GSYMS GPATH tags

distdir: $(DISTFILES)
	@srcdirstrip=`echo "$(srcdir)" | sed 's/[].[^$$\\*]/\\\\&/g'`; \
	topsrcdirstrip=`echo "$(top_srcdir)" | sed 's/[].[^$$\\*]/\\\\&/g'`; \
	list='$(DISTFILES)'; \
	  dist_files=`for file in $$list; do echo $$file; done | \
	  sed -e "s|^$$srcdirstrip/||;t" \
	      -e "s|^$$topsrcdirstrip/|$(top_builddir)/|;t"`; \
	case $$dist_files in \
	  */*) $(MKDIR_P) `echo "$$dist_files" | \
			   sed '/\//!d;s|^|$(distdir)/|;s,/[^/]*$$,,' | \
			   sort -u` ;; \
	esac; \
	for file in $$dist_files; do \
	  if test -f $$file || test -d $$file; then d=.; else d=$(srcdir); fi; \
	  if test -d $$d/$$file; then \
	    dir=`echo "/$$file" | sed -e 's,/[^/]*$$,,'`; \
	    if test -d "$(distdir)/$$file"; then \
	      find "$(distdir)/$$file" -type d ! -perm -700 -exec chmod u+rwx {} \;; \
	    fi; \
	    if test -d $(srcdir)/$$file && test $$d != $(srcdir); then \
	      cp -fpR $(srcdir)/$$file "$(distdir)$$dir" || exit 1; \
	      find "$(distdir)/$$file" -type d ! -perm -700 -exec chmod u+rwx {} \;; \
	    fi; \
	    cp -fpR $$d/$$file "$(distdir)$$dir" || exit 1; \
	  else \
	    test -f "$(distdir)/$$file" \
	    || cp -p $$d/$$file "$(distdir)/$$file" \
	    || exit 1; \
	  fi; \
	done
check-am: all-am
check: $(BUILT_SOURCES)
	$(MAKE) $(AM_MAKEFLAGS) check-am
all-am: Makefile $(LTLIBRARIES) $(HEADERS)
installdirs:
	for dir in "$(DESTDIR)$(libdir)" "$(DESTDIR)$(libgnomevfsincludedir)" "$(DESTDIR)$(libgnomevfsmoduleincludedir)" "$(DESTDIR)$(libgnomevfsplatformincludedir)"; do \
	  test -z "$$dir" || $(MKDIR_P) "$$dir"; \
	done
install: $(BUILT_SOURCES)
	$(MAKE) $(AM_MAKEFLAGS) install-am
install-exec: install-exec-am
install-data: install-data-am
uninstall: uninstall-am

install-am: all-am
	@$(MAKE) $(AM_MAKEFLAGS) install-exec-am install-data-am

installcheck: installcheck-am
install-strip:
	$(MAKE) $(AM_MAKEFLAGS) INSTALL_PROGRAM="$(INSTALL_STRIP_PROGRAM)" \
	  install_sh_PROGRAM="$(INSTALL_STRIP_PROGRAM)" INSTALL_STRIP_FLAG=-s \
	  `test -z '$(STRIP)' || \
	    echo "INSTALL_PROGRAM_ENV=STRIPPROG='$(STRIP)'"` install
mostlyclean-generic:

clean-generic:
	-test -z "$(CLEANFILES)" || rm -f $(CLEANFILES)

distclean-generic:
	-test -z "$(CONFIG_CLEAN_FILES)" || rm -f $(CONFIG_CLEAN_FILES)
	-test . = "$(srcdir)" || test -z "$(CONFIG_CLEAN_VPATH_FILES)" || rm -f $(CONFIG_CLEAN_VPATH_FILES)

maintainer-clean-generic:
	@echo "This command is intended for maintainers to use"
	@echo "it deletes files that may require special tools to rebuild."
	-test -z "$(BUILT_SOURCES)" || rm -f $(BUILT_SOURCES)
clean: clean-am

clean-am: clean-generic clean-libLTLIBRARIES clean-libtool \
	clean-noinstLTLIBRARIES mostlyclean-am

distclean: distclean-am
	-rm -rf ./$(DEPDIR)
	-rm -f Makefile
distclean-am: clean-am distclean-compile distclean-generic \
	distclean-tags

dvi: dvi-am

dvi-am:

html: html-am

html-am:

info: info-am

info-am:

install-data-am: install-libgnomevfsincludeHEADERS \
	install-libgnomevfsmoduleincludeHEADERS \
	install-libgnomevfsplatformincludeHEADERS

install-dvi: install-dvi-am

install-dvi-am:

install-exec-am: install-libLTLIBRARIES

install-html: install-html-am

install-html-am:

install-info: install-info-am

install-info-am:

install-man:

install-pdf: install-pdf-am

install-pdf-am:

install-ps: install-ps-am

install-ps-am:

installcheck-am:

maintainer-clean: maintainer-clean-am
	-rm -rf ./$(DEPDIR)
	-rm -f Makefile
maintainer-clean-am: distclean-am maintainer-clean-generic

mostlyclean: mostlyclean-am

mostlyclean-am: mostlyclean-compile mostlyclean-generic \
	mostlyclean-libtool

pdf: pdf-am

pdf-am:

ps: ps-am

ps-am:

uninstall-am: uninstall-libLTLIBRARIES \
	uninstall-libgnomevfsincludeHEADERS \
	uninstall-libgnomevfsmoduleincludeHEADERS \
	uninstall-libgnomevfsplatformincludeHEADERS

.MAKE: all check install install-am install-strip

.PHONY: CTAGS GTAGS all all-am check check-am clean clean-generic \
	clean-libLTLIBRARIES clean-libtool clean-noinstLTLIBRARIES \
	ctags distclean distclean-compile distclean-generic \
	distclean-libtool distclean-tags distdir dvi dvi-am html \
	html-am info info-am install install-am install-data \
	install-data-am install-dvi install-dvi-am install-exec \
	install-exec-am install-html install-html-am install-info \
	install-info-am install-libLTLIBRARIES \
	install-libgnomevfsincludeHEADERS \
	install-libgnomevfsmoduleincludeHEADERS \
	install-libgnomevfsplatformincludeHEADERS install-man \
	install-pdf install-pdf-am install-ps install-ps-am \
	install-strip installcheck installcheck-am installdirs \
	maintainer-clean maintainer-clean-generic mostlyclean \
	mostlyclean-compile mostlyclean-generic mostlyclean-libtool \
	pdf pdf-am ps ps-am tags uninstall uninstall-am \
	uninstall-libLTLIBRARIES uninstall-libgnomevfsincludeHEADERS \
	uninstall-libgnomevfsmoduleincludeHEADERS \
	uninstall-libgnomevfsplatformincludeHEADERS


# Don't build the library until we have built the header that it needs:
$(OBJECTS) $(libgnomevfs_2_la_OBJECTS): $(libgnomevfs_built_headers)

gnome-vfs-enum-types.h:  $(libgnomevfs_headers_to_scan_for_enums) Makefile
	(cd $(srcdir) && glib-mkenums \
			--fhead "#ifndef __LIBGNOMEVFS_ENUM_TYPES_H__\n#define __LIBGNOMEVFS_ENUM_TYPES_H__\n\n#include <glib-object.h>\n\nG_BEGIN_DECLS\n" \
			--fprod "/* enumerations from \"@filename@\" */\n" \
			--vhead "GType @enum_name@_get_type (void);\n#define GNOME_VFS_TYPE_@ENUMSHORT@ (@enum_name@_get_type())\n" 	\
			--ftail "G_END_DECLS\n\n#endif /* __LIBGNOMEVFS_ENUM_TYPES_H__ */" \
		$(libgnomevfs_headers_to_scan_for_enums)) > $@

gnome-vfs-enum-types.c:  $(libgnomevfs_headers_to_scan_for_enums) Makefile
	(cd $(srcdir) && glib-mkenums \
			--fhead "#include <libgnomevfs/gnome-vfs.h>\n" \
			--fhead "#include <libgnomevfs/gnome-vfs-mime-handlers.h>\n" \
			--fhead "#include <glib-object.h>" \
		      	--fprod "\n/* enumerations from \"@filename@\" */" \
			--vhead "GType\n@enum_name@_get_type (void)\n{\n  static GType etype = 0;\n  if (etype == 0) {\n    static const G@Type@Value values[] = {" 	\
			--vprod "      { @VALUENAME@, \"@VALUENAME@\", \"@valuenick@\" }," \
			--vtail "      { 0, NULL, NULL }\n    };\n    etype = g_@type@_register_static (\"@EnumName@\", values);\n  }\n  return etype;\n}\n" \
		$(libgnomevfs_headers_to_scan_for_enums)) > $@

# Tell versions [3.59,3.63) of GNU make to not export all variables.
# Otherwise a system limit (for SysV at least) may be exceeded.
.NOEXPORT:
